name: CI

on:
  push: {}
  pull_request: {}

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: adoptable_db
          POSTGRES_USER: marc
          POSTGRES_PASSWORD: admin
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U marc -d adoptable_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    # Aquí le decimos a Django que use localhost, no "db".
    env:
      DATABASE_URL: postgres://marc:admin@localhost:5432/adoptable_db
      POETRY_VIRTUALENVS_CREATE: "false"
      POETRY_NO_INTERACTION: "1"
      DB_HOST: localhost
      DB_PORT: 5432
      POSTGRES_DB: adoptable_db
      POSTGRES_USER: marc
      POSTGRES_PASSWORD: admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies (backend)
        working-directory: ./backend
        run: poetry install --no-root

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U marc; do
            echo "Esperando a Postgres…"
            sleep 3
          done

      - name: Run black check (backend)
        working-directory: ./backend
        run: poetry run black --check .

      - name: Run flake8 (backend)
        working-directory: ./backend
        run: poetry run flake8 --config .flake8 .

      # ------------> Aquí forzamos DB_HOST=localhost <------------
      - name: Run migrations (backend)
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
        run: python manage.py migrate

      - name: Run Django tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
        run: python manage.py test

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install frontend dependencies
        working-directory: ./adoptable_front
        run: npm ci

      - name: Run ESLint (frontend)
        working-directory: ./adoptable_front
        run: npm run lint

      - name: Run frontend tests
        working-directory: ./adoptable_front
        run: npm test

      - name: Build production bundle (frontend)
        working-directory: ./adoptable_front
        run: npm run build
